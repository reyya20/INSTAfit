Requirements

XAMPP

A free and open-source cross-platform web server solution stack package developed by Apache Friends, consisting mainly of the Apache HTTP Server, MariaDB database, and interpreters for scripts written in the PHP and Perl programming languages.
GitHub Project
Ensure your project is pushed to a GitHub repository.

Steps to Install XAMPP

Download XAMPP

Go to the XAMPP download page and download the version suitable for your operating system (Windows, Linux, or macOS).
Install XAMPP

Run the installer and follow the on-screen instructions.
Select the components you want to install. By default, all necessary components like Apache, MySQL, PHP, and phpMyAdmin are selected.
Choose the installation directory (default is C:\xampp for Windows).
Start XAMPP

Once installed, open the XAMPP Control Panel.
Click on the "Start" buttons next to "Apache" and "MySQL".
Configure Apache
Port Configuration (if needed)

By default, Apache runs on port 80. If another application uses this port, you may need to change it.

Open the XAMPP Control Panel, click on "Config" next to Apache, and select "Apache (httpd.conf)".

Find the line Listen 80 and change it to a different port, e.g., Listen 8080.

Also, change the ServerName line from ServerName localhost:80 to ServerName localhost:8080.

Configure MySQL
Access phpMyAdmin

Open your web browser and go to http://localhost/phpmyadmin.
Create a new database for your project.
Database Configuration

Import your project's database if you have an SQL file.
Update your project's database configuration file (typically config.php or .env) with the database name, user, and password.
Steps to Set Up Python Environment in VS Code
Install Python

Download and install Python from the official Python website.
Ensure you check the option to add Python to your PATH during installation.
Install Visual Studio Code

Download and install Visual Studio Code from the official VS Code website.
Install Python Extension for VS Code

Open VS Code.
Go to the Extensions view by clicking on the Extensions icon in the Activity Bar on the side of the window.
Search for "Python" and install the extension provided by Microsoft.
Set Up a Virtual Environment

Open the terminal in VS Code (Ctrl + or from the menu: Terminal > New Terminal).
Navigate to your project directory:

cd /path/to/your/project
Create a virtual environment:


python -m venv env
Activate the virtual environment:

.\env\Scripts\activate
On macOS and Linux:

source env/bin/activate
Select the Python Interpreter

In VS Code, press Ctrl + Shift + P to open the Command Palette.
Type and select Python: Select Interpreter.
Choose the interpreter from your virtual environment (it should be named something like env\Scripts\python).

Steps to Install OpenCV and Mediapipe
Install OpenCV

In the activated virtual environment, run:

pip install opencv-python
Install Mediapipe

In the activated virtual environment, run:

pip install mediapipe
Running OpenCV and Mediapipe
Create a New Python File

In VS Code, create a new Python file (e.g., main.py).
Write Sample Code

Hereâ€™s a simple example to capture video from a webcam using OpenCV and Mediapipe for hand detection:
python
Copy code
import cv2
import mediapipe as mp

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands()
mp_drawing = mp.solutions.drawing_utils

# Open webcam
cap = cv2.VideoCapture(0)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Convert the BGR image to RGB
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Process the RGB image
    results = hands.process(frame_rgb)

    # Draw hand landmarks
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

    # Display the resulting frame
    cv2.imshow('MediaPipe Hands', frame)

    # Exit on pressing 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam and close windows
cap.release()
cv2.destroyAllWindows()

Run Your Code

Ensure your virtual environment is activated.
Run your Python file from the terminal:

python main.py
